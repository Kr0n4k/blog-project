name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'blog-backend/**'
              - '.github/workflows/backend-ci.yml'
            frontend:
              - 'blog-frontend/**'
              - '.github/workflows/frontend-ci.yml'

  backend:
    name: Backend Pipeline
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    uses: ./.github/workflows/backend-ci.yml

  frontend:
    name: Frontend Pipeline
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    uses: ./.github/workflows/frontend-ci.yml

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always() && (needs.backend.result == 'success' || needs.frontend.result == 'success')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blog_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        working-directory: ./blog-backend
        run: yarn install --frozen-lockfile

      - name: Install frontend dependencies
        working-directory: ./blog-frontend
        run: yarn install --frozen-lockfile

      - name: Setup backend
        working-directory: ./blog-backend
        run: |
          yarn prisma generate
          yarn prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/blog_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
          SESSION_SECRET: test_secret
          COOKIES_SECRET: test_cookies_secret
          APPLICATION_PORT: 4000
          NODE_ENV: test

      - name: Start backend
        working-directory: ./blog-backend
        run: yarn start:prod &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/blog_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
          SESSION_SECRET: test_secret
          COOKIES_SECRET: test_cookies_secret
          APPLICATION_PORT: 4000
          NODE_ENV: test

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done' || exit 1

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # Add your integration tests here

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]
    if: always()
    
    steps:
      - name: Notify Success
        if: ${{ needs.backend.result == 'success' && needs.frontend.result == 'success' }}
        run: |
          echo "✅ All pipelines completed successfully!"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Integration: ${{ needs.integration.result }}"

      - name: Notify Failure
        if: ${{ needs.backend.result == 'failure' || needs.frontend.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed!"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          exit 1
